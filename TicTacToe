// SPDX-License-Identifier: MIT
pragma solidity 0.8.8;

contract TicTaeToe{

    address public player1;
    address public currentPlayer;
    address public player2; 

    enum state{empty,X,O}
    state[3][3] board;

    constructor(){
        player1=msg.sender;
        currentPlayer=player1;
    }


    function setPlayer2() public 
    {
            require(msg.sender!=player1,"you are Player1 change address");
            player2=msg.sender;
    }

    function move(uint8 row ,uint8 col) public {
        require(player2 != 0x0000000000000000000000000000000000000000,"Add player 2");
        require(row<3 && col<3,"Invalid move");
        require(board[row][col]==state.empty,"Place is occupied");
        require(msg.sender==currentPlayer,"Not your turn");

        board[row][col]=(currentPlayer == player1)? state.X:state.O;

        if(checkWin())
        {

            
           

        }
        else if(checkDraw())
        {

        }
        else 
        {
            currentPlayer=(currentPlayer==player1) ? player2:player1;
        }
    }

    function checkWin() private view returns(bool)
    {

         for (uint8 i=0; i<3; i++) 
            {
                if (board[i][0]!=state.empty && board[i][0]==board[i][1] && board[i][1]==board[i][2]) 
                {

                    return true;

                }
            }   


        for (uint8 j=0; j<3; j++) 
            {

                if (board[j][0] != state.empty && board[j][0]==board[j][1] && board[j][1]==board[j][2]) 
                {

                    return true;

                }  
            }   


         if (board[0][0] != state.empty && board[0][0]==board[1][1] && board[1][1]== board[2][2]) 
         
         {


            return true;


         } 
        
        
        if(board[2][0] != state.empty && board[2][0]==board[1][1] && board[1][1]== board[0][2])
        
         {


            return true;


         }
        
            return false;
         
    
            
    }



    function checkDraw() private view returns(bool)
    {
        for (uint8 i=0; i<3; i++) 
        {
             for (uint8 j=0; j<3; j++) 
             {
                if (board[i][j] == state.empty)
                {
                    return false;
                }
             }  
        }

        return !checkWin();
    }






    

}
